stages:
  - security-scan
  - build
  - deploy

variables:
  DOCKER_USERNAME: "sarra539"
  BACKEND_IMAGE: "sarra539/autoflow-repo:Version1"
  FRONTEND_IMAGE: "sarra539/autoflow-front:version1"
  SECURE_BACKEND_IMAGE: "sarra539/autoflow-repo:secure-latest"

security-scan:
  stage: security-scan
  image: node:18-alpine
  script:
    - echo "Testing security scan"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"
  allow_failure: false

build-backend:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - echo "Checking Docker version..."
    - docker --version
    - echo "Attempting Docker login..."
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
  script:
    - echo "Current directory:"
    - pwd
    - echo "Directory contents:"
    - ls -la
    - echo "Checking if backend-autoflow exists:"
    - ls -la backend-autoflow || echo "backend-autoflow directory not found"
    - echo "Checking for Dockerfiles:"
    - find . -name "Dockerfile*" -type f
    - echo "Building SECURE backend image..."
    - cd backend-autoflow
    - echo "Backend directory contents:"
    - ls -la
    - echo "Available Dockerfiles:"
    - ls -la Dockerfile*
    - echo "Building with Dockerfile.secure.hybrid..."
    - docker build --no-cache --pull -f Dockerfile.secure.hybrid -t $BACKEND_IMAGE .
    - echo "Building additional secure tag..."
    - docker build --no-cache --pull -f Dockerfile.secure.hybrid -t $SECURE_BACKEND_IMAGE .
    - echo "Pushing backend images..."
    - docker push $BACKEND_IMAGE
    - docker push $SECURE_BACKEND_IMAGE
    - echo "Secure backend images built and pushed successfully!"
  retry:
    max: 2
  only:
    - main

build-frontend:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - docker --version
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
  script:
    - cd frontend-autoflow
    - docker build --no-cache -t $FRONTEND_IMAGE .
    - docker push $FRONTEND_IMAGE
  retry:
    max: 2
  only:
    - main

deploy:
  stage: deploy
  tags:
    - production
  before_script:
    - echo "Running on production runner..."
    - kubectl version --client
    - kubectl config current-context
    - echo "DevSecOps Deployment Starting..."
  script:
    - echo "Current pods:"
    - kubectl get pods
    - echo "Current services:"
    - kubectl get services
    - echo "Applying security-enhanced backend deployment..."
    - kubectl apply -f k8s/backend-deployment.yaml
    - echo "Applying frontend deployment..."
    - kubectl apply -f k8s/frontend-deployment.yaml
    - echo "Applying backend service..."
    - kubectl apply -f k8s/backend-service.yaml
    - echo "Applying frontend service..."
    - kubectl apply -f k8s/frontend-service.yaml
    - echo "Applying secrets..."
    - kubectl apply -f k8s/secret.yaml
    - echo "Updating backend deployment with SECURE image..."
    - kubectl set image deployment/backend-deployment backend=$SECURE_BACKEND_IMAGE
    - echo "Updating frontend deployment..."
    - kubectl set image deployment/frontend-deployment frontend=$FRONTEND_IMAGE
    - echo "Force restarting deployments..."
    - kubectl rollout restart deployment/backend-deployment
    - kubectl rollout restart deployment/frontend-deployment
    - echo "Waiting for backend rollout..."
    - kubectl rollout status deployment/backend-deployment --timeout=300s
    - echo "Waiting for frontend rollout..."
    - kubectl rollout status deployment/frontend-deployment --timeout=300s
    - echo "Security Monitoring Setup..."
    - echo "Trivy will automatically scan new pods"
    - echo "SonarQube can analyze code quality"
    - echo "Vault is managing secrets securely"
    - echo "Final pod status:"
    - kubectl get pods
    - echo "Final service status:"
    - kubectl get services
    - echo "DevSecOps Deployment Complete!"
    - echo "Secure images deployed"
    - echo "Security monitoring active"
    - echo "Continuous security scanning enabled"
  environment:
    name: production
    url: http://192.168.111.201:31560
  only:
    - main
