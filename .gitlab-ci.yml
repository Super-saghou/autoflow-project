stages:
  - security-scan
  - build
  - image-scan
  - deploy

variables:
  DOCKER_USERNAME: "sarra539"
  BACKEND_IMAGE: "sarra539/autoflow-repo:NewTagUpdate"
  FRONTEND_IMAGE: "sarra539/autoflow-front:NewTagUpdateFront"
  SECURE_BACKEND_IMAGE: "sarra539/autoflow-repo:NewTagUpdate"
  USE_SECURE_IMAGE: "true"

# SonarQube Code Quality Analysis with SSH Tunnel
sonarqube-scan:
  stage: security-scan
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client sonar-scanner
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan -H 196.178.195.157 >> ~/.ssh/known_hosts
    - ssh -f -N -L 9000:localhost:31334 root@196.178.195.157
  script:
    - sonar-scanner
      -Dsonar.projectKey=autoflow-project
      -Dsonar.sources=.
      -Dsonar.host.url=http://localhost:9000
      -Dsonar.login=$SONAR_TOKEN
  only:
    - main

# Python Security Scanning
security-scan:
  stage: security-scan
  image: python:3.10-slim
  before_script:
    - pip install --no-cache-dir bandit safety pip-audit
  script:
    - echo "Running comprehensive security scans on backend code..."
    - cd backend-autoflow
    - echo "Running Bandit security scan..."
    - bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
    - echo "Running Safety scan..."
    - safety check --json --output safety-report.json || echo "Safety scan completed with warnings"
    - echo "Running pip-audit scan..."
    - pip-audit --format=json --output=pip-audit-report.json || echo "pip-audit scan completed with warnings"
  artifacts:
    reports:
      junit: bandit-report.json
    paths:
      - backend-autoflow/bandit-report.json
      - backend-autoflow/safety-report.json
      - backend-autoflow/pip-audit-report.json
    expire_in: 1 week

# Build Backend
build-backend:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - echo "Logging into Docker Hub..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "Building secure backend image..."
    - docker build -t $SECURE_BACKEND_IMAGE ./backend-autoflow
    - docker push $SECURE_BACKEND_IMAGE
  only:
    - main

# Build Frontend
build-frontend:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - echo "Logging into Docker Hub..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "Building frontend image..."
    - docker build -t $FRONTEND_IMAGE ./frontend-autoflow
    - docker push $FRONTEND_IMAGE
  only:
    - main

# Container Security Scanning with Trivy
image-scan:
  stage: image-scan
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - echo "Installing Trivy for container vulnerability scanning..."
    - wget -qO - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - trivy --version
  script:
    - echo "Scanning backend image for vulnerabilities..."
    - trivy image --format json --output backend-scan.json $SECURE_BACKEND_IMAGE
    - echo "Scanning frontend image for vulnerabilities..."
    - trivy image --format json --output frontend-scan.json $FRONTEND_IMAGE
  artifacts:
    paths:
      - backend-scan.json
      - frontend-scan.json
    expire_in: 1 week
  only:
    - main

# Deploy to Kubernetes
deploy:
  stage: deploy
  image: alpine/k8s:1.28.2
  script:
    - echo "Deploying to Kubernetes..."
    - kubectl apply -f k8s/
    - echo "Deployment completed successfully"
  only:
    - main
