# Multi-stage secure Dockerfile for AutoFlow Backend (Hybrid Node.js + Python)
# Based on your existing Dockerfile with security enhancements

# Stage 1: Base builder with security tools
FROM node:18-alpine as builder

# Install security tools and dependencies
RUN apk add --no-cache \
    bash \
    python3 \
    py3-pip \
    gcc \
    musl-dev \
    python3-dev \
    libffi-dev \
    openssl-dev \
    cargo \
    git \
    curl \
    wget \
    ca-certificates

# Install Python security tools using system packages or virtual environment
RUN python3 -m venv /opt/security-venv && \
    . /opt/security-venv/bin/activate && \
    pip install --no-cache-dir \
        bandit \
        safety \
        pip-audit

# Set the working directory
WORKDIR /app

# Copy package files for Node.js dependencies
COPY package*.json ./

# Install Node.js dependencies
RUN npm ci --only=production

# Copy Python requirements and install Python dependencies
COPY requirements.txt ./
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir -r requirements.txt

# Install additional Python packages for network automation
RUN pip install --no-cache-dir \
    netmiko==4.6.0 \
    paramiko==3.3.1 \
    ansible==8.5.0 \
    PyYAML>=6.0.2 \
    requests==2.31.0

# Stage 2: Security scanning
FROM builder as security-scan

# Copy application code
COPY . .

# Run security scans
RUN echo "Running security scans..." \
    && . /opt/security-venv/bin/activate && \
    bandit -r . -f json -o /tmp/bandit-report.json || echo "Bandit scan completed with warnings" \
    && safety check -r requirements.txt --json --output /tmp/safety-report.json || echo "Safety check completed" \
    && pip-audit --format json --output /tmp/pip-audit-report.json || echo "Pip audit completed" \
    && npm audit --audit-level moderate --json > /tmp/npm-audit-report.json || echo "NPM audit completed"

# Stage 3: Production image
FROM node:18-alpine as production

# Install runtime dependencies only
RUN apk add --no-cache \
    bash \
    python3 \
    py3-pip \
    curl \
    ca-certificates

# Create non-root user for security
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001

# Set the working directory
WORKDIR /app

# Copy Python virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy Node.js dependencies
COPY --from=builder /app/node_modules ./node_modules

# Copy application code
COPY . .

# Copy security scan reports
COPY --from=security-scan /tmp/*-report.json /app/security-reports/

# Create necessary directories
RUN mkdir -p /app/backups /app/logs /app/generated_playbooks /app/security-reports

# Make startup script executable
RUN chmod +x /app/start_services.sh

# Set proper permissions
RUN chown -R appuser:appuser /app \
    && chmod -R 755 /app \
    && chmod 644 /app/security-reports/*.json

# Switch to non-root user
USER appuser

# Expose the ports your backend will use
EXPOSE 5000 5010 5001 5003

# Environment variables
ENV MONGO_URL=mongodb+srv://sarrabngharbia:1pA39c9rUl7I0SR8@cluster0.evbzs.mongodb.net/products?retryWrites=true&w=majority&appName=Cluster0
ENV NODE_ENV=production
ENV BACKUP_DIR=/app/backups
ENV PYTHONPATH=/app
ENV GENERATED_PLAYBOOKS_DIR=/app/generated_playbooks
ENV PYTHONHASHSEED=random

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Start the application using your existing startup script
CMD ["/app/start_services.sh"] 