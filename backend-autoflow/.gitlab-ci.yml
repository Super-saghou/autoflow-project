stages:
  - build
  - deploy

variables:
  DOCKER_USERNAME: "sarra539"
  BACKEND_IMAGE: "sarra539/autoflow-repo:VerifUpdate"
  FRONTEND_IMAGE: "sarra539/autoflow-front:VersionTestKuber9"

# Build Backend Image (on shared runners)
build-backend:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - echo "Checking Docker version..."
    - docker --version
    - echo "Attempting Docker login..."
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin || { echo "Docker login failed"; exit 1; }
  script:
    - echo "Verifying backend directory..."
    - ls -la backend-autoflow || { echo "Directory backend-autoflow not found"; exit 1; }
    - cd backend-autoflow
    - echo "Building backend image..."
    - docker build --no-cache --pull -t $BACKEND_IMAGE .
    - echo "Pushing backend image..."
    - docker push $BACKEND_IMAGE
  retry:
    max: 2
  only:
    - main

# Build Frontend Image (on shared runners)
build-frontend:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - echo "Checking Docker version..."
    - docker --version
    - echo "Attempting Docker login..."
    - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin || { echo "Docker login failed"; exit 1; }
  script:
    - echo "Verifying frontend directory..."
    - ls -la frontend-autoflow || { echo "Directory frontend-autoflow not found"; exit 1; }
    - cd frontend-autoflow
    - echo "Building frontend image with cache busting..."
    - docker build --no-cache --pull --build-arg BUILD_DATE=$(date) --build-arg BUILD_TIME=$(date +%s) -t $FRONTEND_IMAGE .
    - echo "Pushing frontend image..."
    - docker push $FRONTEND_IMAGE
    - echo "Frontend image built and pushed successfully: $FRONTEND_IMAGE"
  retry:
    max: 2
  only:
    - main

# Deploy to Kubernetes (on your self-hosted runner)
deploy:
  stage: deploy
  tags:
    - production
  before_script:
    - echo "Running on production runner..."
    - kubectl version --client
    - kubectl config current-context
  script:
    - echo "Current pods:"
    - kubectl get pods
    - echo "Current services:"
    - kubectl get services
    - echo "Applying backend deployment..."
    - kubectl apply -f k8s/backend-deployment.yaml
    - echo "Applying frontend deployment..."
    - kubectl apply -f k8s/frontend-deployment.yaml
    - echo "Applying backend service..."
    - kubectl apply -f k8s/backend-service.yaml
    - echo "Applying frontend service..."
    - kubectl apply -f k8s/frontend-service.yaml
    - echo "Applying secrets..."
    - kubectl apply -f k8s/secret.yaml
    - echo "Updating backend deployment..."
    - kubectl set image deployment/backend-deployment backend=$BACKEND_IMAGE
    - echo "Updating frontend deployment..."
    - kubectl set image deployment/frontend-deployment frontend=$FRONTEND_IMAGE
    - echo "Force restarting deployments..."
    - kubectl rollout restart deployment/backend-deployment
    - kubectl rollout restart deployment/frontend-deployment
    - echo "Waiting for backend rollout..."
    - kubectl rollout status deployment/backend-deployment --timeout=300s
    - echo "Waiting for frontend rollout..."
    - kubectl rollout status deployment/frontend-deployment --timeout=300s
    - echo "Final pod status:"
    - kubectl get pods
    - echo "Final service status:"
    - kubectl get services
  environment:
    name: production
    url: http://192.168.111.201:31560
  only:
    - main 