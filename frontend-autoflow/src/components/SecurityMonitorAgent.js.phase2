import React, { useState, useEffect, useRef } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  CircularProgress, 
  Card, 
  CardContent, 
  Grid, 
  Chip, 
  Alert, 
  Divider,
  IconButton,
  Tooltip,
  Badge,
  Paper
} from '@mui/material';
import { 
  PlayArrow, 
  Stop, 
  Security, 
  Warning, 
  CheckCircle, 
  Error, 
  Refresh,
  Visibility,
  VisibilityOff,
  Shield,
  SecurityIcon,
  MonitorHeart,
  TrendingUp,
  BugReport,
  Notifications,
  Schedule
} from '@mui/icons-material';

// Ultra modern professional card style
const ultraModernCardStyle = {
  background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
  borderRadius: 16,
  boxShadow: '0 4px 24px 0 rgba(15, 23, 42, 0.06)',
  padding: '32px',
  marginBottom: 32,
  border: '1px solid #e2e8f0',
  minHeight: 120,
  position: 'relative',
  overflow: 'hidden',
  '&::before': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: '3px',
    background: 'linear-gradient(90deg, #3b82f6 0%, #1d4ed8 50%, #1e40af 100%)',
  }
};

// Modern metric card style - replacing oval/circular design
const modernMetricCardStyle = {
  background: 'rgba(255, 255, 255, 0.95)',
  borderRadius: 12,
  boxShadow: '0 2px 16px rgba(15, 23, 42, 0.04)',
  border: '1px solid #e2e8f0',
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  height: '100%',
  '&:hover': {
    transform: 'translateY(-2px)',
    boxShadow: '0 8px 32px rgba(15, 23, 42, 0.08)',
    borderColor: '#cbd5e1'
  }
};

// Professional data display style
const professionalDataBoxStyle = {
  background: 'linear-gradient(135deg, #f8fafc 0%, #ffffff 100%)',
  border: '1px solid #e2e8f0',
  borderRadius: 12,
  padding: 20,
  fontFamily: 'JetBrains Mono, Fira Code, Consolas, monospace',
  fontSize: '0.85rem',
  lineHeight: 1.6,
  whiteSpace: 'pre-wrap',
  wordWrap: 'break-word',
  minHeight: 200,
  maxHeight: 400,
  overflow: 'auto',
  color: '#1e293b',
  '&::-webkit-scrollbar': {
    width: '6px',
  },
  '&::-webkit-scrollbar-track': {
    background: '#f1f5f9',
  },
  '&::-webkit-scrollbar-thumb': {
    background: '#cbd5e1',
    borderRadius: '3px',
  },
  '&::-webkit-scrollbar-thumb:hover': {
    background: '#94a3b8',
  },
};

// Modern threat/alert item style
const modernItemStyle = {
  background: 'rgba(255, 255, 255, 0.8)',
  borderRadius: 8,
  padding: 16,
  marginBottom: 12,
  border: '1px solid #e2e8f0',
  transition: 'all 0.2s ease',
  '&:hover': {
    backgroundColor: 'rgba(248, 250, 252, 0.9)',
    transform: 'translateY(-1px)',
    boxShadow: '0 4px 12px rgba(15, 23, 42, 0.08)',
    borderColor: '#cbd5e1'
  }
};

const SecurityMonitorAgent = () => {
  const [monitoringStatus, setMonitoringStatus] = useState('stopped');
  const [logs, setLogs] = useState([]);
  const [threats, setThreats] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [stats, setStats] = useState({
    totalLogs: 0,
    threatsDetected: 0,
    alertsGenerated: 0,
    lastUpdate: null
  });
  const [showLogs, setShowLogs] = useState(true);
  const [showThreats, setShowThreats] = useState(true);
  const [showAlerts, setShowAlerts] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  const logsEndRef = useRef(null);
  const threatsEndRef = useRef(null);
  const alertsEndRef = useRef(null);

  // Auto-refresh data when monitoring is active
  useEffect(() => {
    let interval;
    if (monitoringStatus === 'active') {
      interval = setInterval(() => {
        fetchStatus();
        fetchLogs();
        fetchThreats();
        fetchAlerts();
      }, 5000);
    }
    return () => clearInterval(interval);
  }, [monitoringStatus]);

  const fetchStatus = async () => {
    try {
      const response = await fetch('/api/security-monitor/status');
      if (response.ok) {
        const data = await response.json();
        setMonitoringStatus(data.status);
      }
    } catch (err) {
      console.error('Failed to fetch status:', err);
    }
  };

  const fetchLogs = async () => {
    try {
      const response = await fetch('/api/security-monitor/logs');
      if (response.ok) {
        const data = await response.json();
        setLogs(data.logs || []);
        setStats(prev => ({ ...prev, totalLogs: data.totalLogs || 0, lastUpdate: new Date().toLocaleTimeString() }));
      }
    } catch (err) {
      console.error('Failed to fetch logs:', err);
    }
  };

  const fetchThreats = async () => {
    try {
      const response = await fetch('/api/security-monitor/threats');
      if (response.ok) {
        const data = await response.json();
        setThreats(data.threats || []);
        setStats(prev => ({ ...prev, threatsDetected: data.totalThreats || 0 }));
      }
    } catch (err) {
      console.error('Failed to fetch threats:', err);
    }
  };

  const fetchAlerts = async () => {
    try {
      const response = await fetch('/api/security-monitor/alerts');
      if (response.ok) {
        const data = await response.json();
        setAlerts(data.alerts || []);
        setStats(prev => ({ ...prev, alertsGenerated: data.totalAlerts || 0 }));
      }
    } catch (err) {
      console.error('Failed to fetch alerts:', err);
    }
  };

  const startMonitoring = async () => {
    setError('');
    setSuccess('');
    setMonitoringStatus('starting');
    
    try {
      const response = await fetch('/api/security-monitor/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (response.ok) {
        const data = await response.json();
        setMonitoringStatus('active');
        setSuccess('Security monitoring started successfully');
        fetchLogs();
        fetchThreats();
        fetchAlerts();
      } else {
        const errorData = await response.json();
        setError(errorData.error || 'Failed to start monitoring');
        setMonitoringStatus('stopped');
      }
    } catch (err) {
      setError('Network error: ' + err.message);
      setMonitoringStatus('stopped');
    }
  };

  const stopMonitoring = async () => {
    setError('');
    setSuccess('');
    
    try {
      const response = await fetch('/api/security-monitor/stop', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (response.ok) {
        setMonitoringStatus('stopped');
        setSuccess('Security monitoring stopped');
        setLogs([]);
        setThreats([]);
        setAlerts([]);
        setStats({ totalLogs: 0, threatsDetected: 0, alertsGenerated: 0, lastUpdate: null });
      } else {
        const errorData = await response.json();
        setError(errorData.error || 'Failed to stop monitoring');
      }
    } catch (err) {
      setError('Network error: ' + err.message);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#10b981';
      case 'starting': return '#f59e0b';
      case 'stopped': return '#6b7280';
      case 'error': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'active': return <CheckCircle sx={{ color: '#10b981', fontSize: 20 }} />;
      case 'starting': return <CircularProgress size={20} sx={{ color: '#f59e0b' }} />;
      case 'stopped': return <Stop sx={{ color: '#6b7280', fontSize: 20 }} />;
      case 'error': return <Error sx={{ color: '#ef4444', fontSize: 20 }} />;
      default: return <Stop sx={{ color: '#6b7280', fontSize: 20 }} />;
    }
  };

  const getThreatSeverityColor = (severity) => {
    switch (severity) {
      case 'high': return '#ef4444';
      case 'medium': return '#f59e0b';
      case 'low': return '#10b981';
      default: return '#6b7280';
    }
  };

  const formatTimestamp = (timestamp) => {
    if (!timestamp) return '';
    try {
      return new Date(timestamp).toLocaleTimeString();
    } catch {
      return timestamp;
    }
  };

  return (
    <Box>
      {/* Ultra Modern Main Control Panel */}
      <Box sx={ultraModernCardStyle}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 4 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>
            <Box sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: 64,
              height: 64,
              borderRadius: 20,
              background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
              boxShadow: '0 8px 24px rgba(59, 130, 246, 0.25)'
            }}>
              <Security sx={{ fontSize: 32, color: 'white' }} />
            </Box>
            <Box>
              <Typography variant="h3" sx={{ 
                color: '#1e293b', 
                fontWeight: 800, 
                margin: 0,
                letterSpacing: '-0.02em',
                background: 'linear-gradient(135deg, #1e293b 0%, #475569 100%)',
                backgroundClip: 'text',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent'
              }}>
                AI Security Monitor
              </Typography>
              <Typography variant="h6" sx={{ 
                color: '#64748b', 
                marginTop: 1, 
                fontWeight: 500
              }}>
                Advanced threat detection and network security monitoring
              </Typography>
            </Box>
          </Box>
          
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 16,
            padding: '16px 24px',
            borderRadius: 16,
            background: 'rgba(59, 130, 246, 0.05)',
            border: '1px solid rgba(59, 130, 246, 0.1)',
            fontWeight: 600,
            fontSize: '1rem'
          }}>
            <Chip 
              label={monitoringStatus.toUpperCase()} 
              sx={{ 
                backgroundColor: getStatusColor(monitoringStatus),
                color: 'white',
                fontWeight: 600,
                fontSize: '0.85rem'
              }}
            />
            {getStatusIcon(monitoringStatus)}
          </Box>
        </Box>
        
        <Typography variant="body1" sx={{ 
          color: '#475569', 
          marginBottom: 4, 
          fontSize: '1.1rem',
          lineHeight: 1.6,
          maxWidth: '900px'
        }}>
          Real-time network security monitoring with AI-powered threat detection. Monitor Cisco switch logs, 
          detect suspicious activities, and receive intelligent security alerts with automated response capabilities.
        </Typography>

        <Box sx={{ display: 'flex', gap: 3, flexWrap: 'wrap', alignItems: 'center' }}>
          <Button
            variant="contained"
            startIcon={<PlayArrow />}
            onClick={startMonitoring}
            disabled={monitoringStatus === 'starting' || monitoringStatus === 'active'}
            sx={{
              background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
              borderRadius: 12,
              padding: '14px 28px',
              fontSize: '1rem',
              fontWeight: 600,
              textTransform: 'none',
              boxShadow: '0 4px 16px rgba(16, 185, 129, 0.3)',
              '&:hover': { 
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                boxShadow: '0 6px 20px rgba(16, 185, 129, 0.4)',
                transform: 'translateY(-1px)'
              },
              '&:disabled': { 
                background: '#9ca3af',
                boxShadow: 'none',
                transform: 'none'
              }
            }}
          >
            {monitoringStatus === 'starting' ? 'Starting...' : 'Start Monitoring'}
          </Button>
          
          <Button
            variant="outlined"
            startIcon={<Stop />}
            onClick={stopMonitoring}
            disabled={monitoringStatus === 'stopped' || monitoringStatus === 'starting'}
            sx={{
              borderColor: '#ef4444',
              color: '#ef4444',
              borderRadius: 12,
              padding: '14px 28px',
              fontSize: '1rem',
              fontWeight: 600,
              textTransform: 'none',
              borderWidth: 2,
              '&:hover': { 
                borderColor: '#dc2626',
                backgroundColor: 'rgba(239, 68, 68, 0.04)',
                borderWidth: 2,
                transform: 'translateY(-1px)'
              }
            }}
          >
            Stop Monitoring
          </Button>

          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={() => {
              fetchStatus();
              fetchLogs();
              fetchThreats();
              fetchAlerts();
            }}
            sx={{
              borderColor: '#3b82f6',
              color: '#3b82f6',
              borderRadius: 12,
              padding: '14px 28px',
              fontSize: '1rem',
              fontWeight: 600,
              textTransform: 'none',
              borderWidth: 2,
              '&:hover': { 
                borderColor: '#2563eb',
                backgroundColor: 'rgba(59, 130, 246, 0.04)',
                borderWidth: 2,
                transform: 'translateY(-1px)'
              }
            }}
          >
            Refresh Data
          </Button>
        </Box>

        {/* Status Messages */}
        {error && (
          <Alert severity="error" sx={{ mt: 3, borderRadius: 12 }}>
            {error}
          </Alert>
        )}
        {success && (
          <Alert severity="success" sx={{ mt: 3, borderRadius: 12 }}>
            {success}
          </Alert>
        )}
      </Box>

      {/* Ultra Modern Statistics Dashboard - Replacing oval/circular cards */}
      <Grid container spacing={3} sx={{ marginBottom: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={modernMetricCardStyle}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Box sx={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  width: 48,
                  height: 48,
                  borderRadius: 12,
                  background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                  boxShadow: '0 4px 12px rgba(16, 185, 129, 0.25)'
                }}>
                  <TrendingUp sx={{ color: 'white', fontSize: 24 }} />
                </Box>
                <Typography variant="h3" sx={{ color: '#10b981', fontWeight: 800, fontSize: '2rem' }}>
                  {stats.totalLogs}
                </Typography>
              </Box>
              <Typography variant="h6" sx={{ color: '#1e293b', fontWeight: 700, mb: 1 }}>
                Total Logs
              </Typography>
              <Typography variant="body2" sx={{ color: '#64748b', fontWeight: 500 }}>
                Network activity logs processed
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={modernMetricCardStyle}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Box sx={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  width: 48,
                  height: 48,
                  borderRadius: 12,
                  background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                  boxShadow: '0 4px 12px rgba(239, 68, 68, 0.25)'
                }}>
                  <BugReport sx={{ color: 'white', fontSize: 24 }} />
                </Box>
                <Typography variant="h3" sx={{ color: '#ef4444', fontWeight: 800, fontSize: '2rem' }}>
                  {stats.threatsDetected}
                </Typography>
              </Box>
              <Typography variant="h6" sx={{ color: '#1e293b', fontWeight: 700, mb: 1 }}>
                Threats Detected
              </Typography>
              <Typography variant="body2" sx={{ color: '#64748b', fontWeight: 500 }}>
                Security threats identified
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={modernMetricCardStyle}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Box sx={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  width: 48,
                  height: 48,
                  borderRadius: 12,
                  background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                  boxShadow: '0 4px 12px rgba(245, 158, 11, 0.25)'
                }}>
                  <Notifications sx={{ color: 'white', fontSize: 24 }} />
                </Box>
                <Typography variant="h3" sx={{ color: '#f59e0b', fontWeight: 800, fontSize: '2rem' }}>
                  {stats.alertsGenerated}
                </Typography>
              </Box>
              <Typography variant="h6" sx={{ color: '#1e293b', fontWeight: 700, mb: 1 }}>
                Alerts Generated
              </Typography>
              <Typography variant="body2" sx={{ color: '#64748b', fontWeight: 500 }}>
                Security alerts triggered
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={modernMetricCardStyle}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Box sx={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  width: 48,
                  height: 48,
                  borderRadius: 12,
                  background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                  boxShadow: '0 4px 12px rgba(59, 130, 246, 0.25)'
                }}>
                  <Schedule sx={{ color: 'white', fontSize: 24 }} />
                </Box>
                <Typography variant="h3" sx={{ color: '#3b82f6', fontWeight: 800, fontSize: '1.5rem' }}>
                  {stats.lastUpdate || 'N/A'}
                </Typography>
              </Box>
              <Typography variant="h6" sx={{ color: '#1e293b', fontWeight: 700, mb: 1 }}>
                Last Update
              </Typography>
              <Typography variant="body2" sx={{ color: '#64748b', fontWeight: 500 }}>
                Most recent data refresh
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Ultra Modern Live Data Display */}
      <Grid container spacing={3}>
        {/* Live Switch Logs */}
        <Grid item xs={12} lg={6}>
          <Card sx={{ ...modernMetricCardStyle, height: 'fit-content' }}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Box sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: 44,
                    height: 44,
                    borderRadius: 12,
                    background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                    boxShadow: '0 4px 12px rgba(59, 130, 246, 0.25)'
                  }}>
                    <TrendingUp sx={{ color: 'white', fontSize: 22 }} />
                  </Box>
                  <Typography variant="h5" sx={{ fontWeight: 700, color: '#1e293b' }}>
                    Live Switch Logs
                  </Typography>
                </Box>
                <IconButton 
                  size="small" 
                  onClick={() => setShowLogs(!showLogs)}
                  sx={{
                    backgroundColor: showLogs ? 'rgba(59, 130, 246, 0.1)' : 'rgba(100, 116, 139, 0.1)',
                    '&:hover': {
                      backgroundColor: showLogs ? 'rgba(59, 130, 246, 0.2)' : 'rgba(100, 116, 139, 0.2)'
                    }
                  }}
                >
                  {showLogs ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </Box>
              
              {showLogs ? (
                <Box sx={professionalDataBoxStyle}>
                  {logs.length > 0 ? (
                    logs.map((log, index) => (
                      <Box key={index} sx={{ 
                        mb: 2, 
                        p: 2, 
                        backgroundColor: 'rgba(248, 250, 252, 0.8)',
                        borderRadius: 8,
                        border: '1px solid #e2e8f0'
                      }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
                          <Typography variant="caption" sx={{ 
                            color: '#64748b', 
                            fontWeight: 600,
                            backgroundColor: 'rgba(100, 116, 139, 0.1)',
                            padding: '2px 8px',
                            borderRadius: 4
                          }}>
                            {formatTimestamp(log.timestamp)}
                          </Typography>
                        </Box>
                        <Typography variant="body2" sx={{ 
                          color: '#1e293b', 
                          fontFamily: 'JetBrains Mono, monospace',
                          fontSize: '0.85rem'
                        }}>
                          {log.message}
                        </Typography>
                      </Box>
                    ))
                  ) : (
                    <Box sx={{ textAlign: 'center', py: 6 }}>
                      <Typography sx={{ color: '#94a3b8', fontStyle: 'italic', fontSize: '1.1rem' }}>
                        {monitoringStatus === 'active' ? 'Waiting for switch logs...' : 'No logs available'}
                      </Typography>
                    </Box>
                  )}
                  <div ref={logsEndRef} />
                </Box>
              ) : (
                <Box sx={{ textAlign: 'center', py: 6 }}>
                  <Typography sx={{ color: '#94a3b8' }}>
                    Logs hidden
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Threat Detection */}
        <Grid item xs={12} lg={3}>
          <Card sx={{ ...modernMetricCardStyle, height: 'fit-content' }}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Box sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: 44,
                    height: 44,
                    borderRadius: 12,
                    background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                    boxShadow: '0 4px 12px rgba(239, 68, 68, 0.25)'
                  }}>
                    <BugReport sx={{ color: 'white', fontSize: 22 }} />
                  </Box>
                  <Typography variant="h6" sx={{ fontWeight: 700, color: '#1e293b' }}>
                    Threats
                  </Typography>
                </Box>
                <IconButton 
                  size="small" 
                  onClick={() => setShowThreats(!showThreats)}
                  sx={{
                    backgroundColor: showThreats ? 'rgba(239, 68, 68, 0.1)' : 'rgba(100, 116, 139, 0.1)',
                    '&:hover': {
                      backgroundColor: showThreats ? 'rgba(239, 68, 68, 0.2)' : 'rgba(100, 116, 139, 0.2)'
                    }
                  }}
                >
                  {showThreats ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </Box>
              
              {showThreats ? (
                <Box sx={{ maxHeight: 300, overflow: 'auto' }}>
                  {threats.length > 0 ? (
                    threats.map((threat, index) => (
                      <Box key={index} sx={modernItemStyle}>
                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                          <Chip 
                            label={threat.severity || 'Unknown'} 
                            size="small"
                            sx={{ 
                              backgroundColor: getThreatSeverityColor(threat.severity),
                              color: 'white',
                              fontWeight: 600,
                              fontSize: '0.75rem'
                            }}
                          />
                          <Typography variant="caption" sx={{ color: '#64748b', fontWeight: 500 }}>
                            {formatTimestamp(threat.timestamp)}
                          </Typography>
                        </Box>
                        <Typography variant="body2" sx={{ color: '#374151', fontWeight: 500, mb: 1 }}>
                          {threat.description || threat.message || 'No description available'}
                        </Typography>
                        {threat.source && (
                          <Typography variant="caption" sx={{ color: '#6b7280', display: 'block' }}>
                            Source: {threat.source}
                          </Typography>
                        )}
                      </Box>
                    ))
                  ) : (
                    <Box sx={{ textAlign: 'center', py: 4 }}>
                      <Typography sx={{ color: '#94a3b8', fontStyle: 'italic' }}>
                        {monitoringStatus === 'active' ? 'No threats detected' : 'No threat data available'}
                      </Typography>
                    </Box>
                  )}
                  <div ref={threatsEndRef} />
                </Box>
              ) : (
                <Box sx={{ textAlign: 'center', py: 6 }}>
                  <Typography sx={{ color: '#94a3b8' }}>
                    Threats hidden
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Security Alerts */}
        <Grid item xs={12} lg={3}>
          <Card sx={{ ...modernMetricCardStyle, height: 'fit-content' }}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Box sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: 44,
                    height: 44,
                    borderRadius: 12,
                    background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                    boxShadow: '0 4px 12px rgba(245, 158, 11, 0.25)'
                  }}>
                    <Notifications sx={{ color: 'white', fontSize: 22 }} />
                  </Box>
                  <Typography variant="h6" sx={{ fontWeight: 700, color: '#1e293b' }}>
                    Alerts
                  </Typography>
                </Box>
                <IconButton 
                  size="small" 
                  onClick={() => setShowAlerts(!showAlerts)}
                  sx={{
                    backgroundColor: showAlerts ? 'rgba(245, 158, 11, 0.1)' : 'rgba(100, 116, 139, 0.1)',
                    '&:hover': {
                      backgroundColor: showAlerts ? 'rgba(245, 158, 11, 0.2)' : 'rgba(100, 116, 139, 0.2)'
                    }
                  }}
                >
                  {showAlerts ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </Box>
              
              {showAlerts ? (
                <Box sx={{ maxHeight: 300, overflow: 'auto' }}>
                  {alerts.length > 0 ? (
                    alerts.map((alert, index) => (
                      <Box key={index} sx={modernItemStyle}>
                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                          <Chip 
                            label={alert.type || 'Alert'} 
                            size="small"
                            sx={{ 
                              backgroundColor: '#f59e0b',
                              color: 'white',
                              fontWeight: 600,
                              fontSize: '0.75rem'
                            }}
                          />
                          <Typography variant="caption" sx={{ color: '#64748b', fontWeight: 500 }}>
                            {formatTimestamp(alert.timestamp)}
                          </Typography>
                        </Box>
                        <Typography variant="body2" sx={{ color: '#374151', fontWeight: 500, mb: 1 }}>
                          {alert.message || alert.description || 'No message available'}
                        </Typography>
                        {alert.source && (
                          <Typography variant="caption" sx={{ color: '#6b7280', display: 'block' }}>
                            Source: {alert.source}
                          </Typography>
                        )}
                      </Box>
                    ))
                  ) : (
                    <Box sx={{ textAlign: 'center', py: 4 }}>
                      <Typography sx={{ color: '#94a3b8', fontStyle: 'italic' }}>
                        {monitoringStatus === 'active' ? 'No alerts generated' : 'No alert data available'}
                      </Typography>
                    </Box>
                  )}
                  <div ref={alertsEndRef} />
                </Box>
              ) : (
                <Box sx={{ textAlign: 'center', py: 6 }}>
                  <Typography sx={{ color: '#94a3b8' }}>
                    Alerts hidden
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default SecurityMonitorAgent;
